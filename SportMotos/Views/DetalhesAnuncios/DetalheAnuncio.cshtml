@using System.IO

@{
    ViewData["Title"] = @Model.Titulo;
}

<div class="container mt-5">
    <h2 class="mb-4">Detalhes do Anúncio</h2>

    <div class="card shadow-sm p-4 mb-4">
        <div class="row g-4 align-items-center">
            <!-- Coluna da Imagem -->
            <div class="col-md-5">
                @if (ViewBag.TipoAnuncio == "motos")
                {
                    @if (Model.IdMotoNavigation != null && Model.IdMotoNavigation.Imagens != null && Model.IdMotoNavigation.Imagens.Count > 0)
                    {
                        @foreach (var imagem in Model.IdMotoNavigation.Imagens)
                        {
                            Console.WriteLine("Nome imagem:" + imagem);
                            <img src="@Url.Content("~/images/motos/" + imagem.NomeArquivo + ".jpg")"
                            alt="Imagem da Moto @Model.IdMotoNavigation.Matricula"
                            class="img-fluid rounded">
                        }
                    }
                    else
                    {
                        <p>Sem imagem disponível</p>
                    }
                }
                else if (ViewBag.TipoAnuncio == "pecas" && Model.IdPecaNavigation?.Imagens != null && Model.IdPecaNavigation.Imagens.Count > 0)
                {
                    var nomeArquivo = Model.IdPecaNavigation.Imagens.FirstOrDefault()?.NomeArquivo;

                    if (!string.IsNullOrEmpty(nomeArquivo))
                    {
                        // Verificar diferentes extensões
                        var extensoes = new[] { ".jpg", ".png", ".jpeg" };
                        string imagemPecaPath = null;

                        foreach (var extensao in extensoes)
                        {
                            var caminhoCompleto = System.IO.Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/images/pecas", nomeArquivo + extensao);

                            if (System.IO.File.Exists(caminhoCompleto))
                            {
                                imagemPecaPath = Url.Content($"~/images/pecas/{nomeArquivo}{extensao}");
                                break;
                            }
                        }

                        if (!string.IsNullOrEmpty(imagemPecaPath))
                        {
                            <img src="@imagemPecaPath"
                                 alt="Imagem da Peça @Model.IdPecaNavigation.Nome"
                                 class="img-fluid rounded" />
                        }
                        else
                        {
                            <p>Sem imagem disponível</p>
                        }
                    }
                    else
                    {
                        <p>Sem imagem disponível</p>
                    }
                }
                else
                {
                    <p>Sem imagem disponível</p>
                }
            </div>

            <!-- Coluna dos Detalhes -->
            <div class="col-md-7">
                <div class="card-body">
                    <h3>@Model.Titulo</h3>
                    <p><strong>Preço:</strong> €@Model.Preco.ToString("F2")</p>
                    @if (ViewBag.TipoAnuncio == "motos" && Model.IdMotoNavigation != null)
                    {
                        <p><strong>Marca:</strong> @Model.IdMotoNavigation.Marca</p>
                        <p><strong>Modelo:</strong> @Model.IdMotoNavigation.Modelo</p>
                        <p><strong>Ano:</strong> @Model.IdMotoNavigation.Ano</p>
                    }

                    @if (ViewBag.TipoAnuncio == "pecas" && Model.IdPecaNavigation != null)
                    {
                        <p><strong>Categoria:</strong> @Model.IdPecaNavigation.Categoria</p>
                        <p><strong>Descrição:</strong> @Model.Descricao</p>
                        <p><strong>Stock:</strong> @Model.IdPecaNavigation.Stock.ToString()</p>
                    }

                    <!-- Botão de Ver outros detalhes -->
                    <button class="btn dropdown-toggle" type="button" data-bs-toggle="collapse" data-bs-target="#outrosDetalhes" aria-expanded="false">
                        Ver outros detalhes
                    </button>

                    <!-- Seção de detalhes ocultáveis -->
                    <div class="collapse mt-3" id="outrosDetalhes">
                        <div class="card card-body">
                            @if (ViewBag.TipoAnuncio == "motos" && Model.IdMotoNavigation != null)
                            {
                                <p><strong>Quilometragem:</strong> @Model.IdMotoNavigation.Quilometragem Km</p>
                                <p><strong>Condição:</strong> @Model.Condicao</p>
                                <p><strong>Descrição:</strong> @Model.Descricao</p>
                                <p><strong>Visualizações:</strong> @Model.Visualizacoes</p>
                                <p><strong>Favoritos:</strong> @Model.Favoritos</p>
                                <p><strong>Última edição:</strong> @(Model.DataEdicao?.ToString("dd/MM/yyyy") ?? "Nunca editado")</p>
                            }

                            @if (ViewBag.TipoAnuncio == "pecas" && Model.IdPecaNavigation != null)
                            {
                                <p><strong>Marca:</strong> @Model.IdPecaNavigation.Marca</p>
                                <p><strong>Modelo:</strong> @(Model.IdPecaNavigation.Modelo ?? "-")</p>
                                <p><strong>Peso:</strong> @Model.IdPecaNavigation.Peso KG</p>
                                <p><strong>Garantia:</strong> @Model.IdPecaNavigation.Garantia meses</p>
                                <p><strong>Última edição:</strong> @(Model.DataEdicao?.ToString("dd/MM/yyyy") ?? "Nunca editado")</p>
                            }
                        </div>
                    </div>

                    @if (ViewBag.TipoAnuncio == "pecas")
                    {
                        <div class="mt-3">
                            <div class="d-flex align-items-center">
                                <!-- Botão de diminuir quantidade -->
                                <button type="button" class="btn btn-danger me-2" id="decrease">-</button>

                                <!-- Campo de quantidade (desativado) -->
                                <input type="text" id="quantity" class="form-control text-center" value="1" disabled style="width: 50px;">

                                <!-- Botão de aumentar quantidade -->
                                <button type="button" class="btn btn-success ms-2" id="increase">+</button>
                            </div>

                            <!-- Badge do preço total (escondido por padrão) -->
                            <span id="totalPrice" class="badge bg-primary mt-2" style="display: none;"></span>
                        </div>
                    }

                    <!-- Botão Voltar (sempre abaixo da dropdown) -->
                    <div class="mt-3">
                        <a href="@Url.Action("Anuncio", "Anuncio", new { tipo = ViewBag.TipoAnuncio })" class="btn btn-secondary">Voltar</a>
                    </div>
                    @if (ViewBag.TipoAnuncio == "motos")
                    {
                        <div class="mt-3">
                            <a href="#" class="btn btn-primary" id="btnInteresse" data-id="@Model.IdMoto">Estou interessado</a>
                            <a href="#" id="favorito-btn">
                                <svg id="favorito-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="black" class="bi bi-heart" viewBox="0 0 16 16">
                                    <path d="m8 2.748-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143q.09.083.176.171a3 3 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15" />
                                </svg>
                            </a>
                            <input type="hidden" id="moto-id" value="@Model.IdMoto" />
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/js/jquery.js"></script>
<script src="~/js/bootstrap.bundle.min.js"></script>
<script>
        // Marcar Favorito
    document.addEventListener("DOMContentLoaded", function () {
        const favoritoBtn = document.getElementById('favorito-btn');
        const icon = document.getElementById('favorito-icon');
        const idMotoInput = document.getElementById('moto-id');

        if (favoritoBtn && icon && idMotoInput) {
            favoritoBtn.addEventListener('click', function (e) {
                e.preventDefault();

                const idMoto = idMotoInput.value;
                const tipoAnuncio = 'motos';

                const isFavoritado = icon.classList.contains('bi-heart-fill');

                if (!isFavoritado) {
                    icon.classList.replace('bi-heart', 'bi-heart-fill');
                    icon.style.color = "#7d0404";
                    this.title = "Remover dos Favoritos";

                    fetch('/Favoritos/Adicionar', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ anuncioId: idMoto, tipoAnuncio: tipoAnuncio })
                    }).then(response => response.json())
                        .then(data => {
                            if (!data.sucesso) alert('Erro ao adicionar aos favoritos.');
                        });
                } else {
                    icon.classList.replace('bi-heart-fill', 'bi-heart');
                    icon.style.color = "black";
                    this.title = "Adicionar aos Favoritos";

                    fetch('/Favoritos/Remover', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ anuncioId: idMoto, tipoAnuncio: tipoAnuncio })
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (!data.sucesso) {
                                console.error('Erro ao remover dos favoritos:', data.mensagem);
                            }
                        })
                        .catch(error => {
                            console.error('Erro na requisição:', error);
                        });
                }
            });
        }

        const decreaseBtn = document.getElementById("decrease");
        const increaseBtn = document.getElementById("increase");
        const quantityInput = document.getElementById("quantity");
        const totalPriceBadge = document.getElementById("totalPrice");
        const precoUnitario = 8000; // Obtém o preço do produto

        // Verificar se os elementos existem antes de adicionar eventos
        if (decreaseBtn && increaseBtn && quantityInput && totalPriceBadge) {
            // Função para atualizar a quantidade
            function updateQuantity(change) {
                let quantidade = parseInt(quantityInput.value) + change;
                if (quantidade < 1) return;

                quantityInput.value = quantidade;

                // Atualizar preço total e exibir badge se quantidade for >= 2
                if (quantidade >= 2) {
                    totalPriceBadge.textContent = `Total: €${(precoUnitario * quantidade).toFixed(2)}`;
                    totalPriceBadge.style.display = "inline-block";
                } else {
                    totalPriceBadge.style.display = "none";
                }
            }

            // Eventos de clique nos botões
            decreaseBtn.addEventListener("click", () => updateQuantity(-1));
            increaseBtn.addEventListener("click", () => updateQuantity(1));
        }
    });

    //Marcar intersse
        $(function () {
        $("#btnInteresse").click(function (e) {
            e.preventDefault();
            var idMoto = $(this).data("id"); // Alterado para idMoto para consistência

            $.get("/Interesse/Criar", { idMoto: idMoto }, function (data) {
                $("body").append(data);
                $("#modalInteresse").modal("show");
            }).fail(function (jqXHR, textStatus, errorThrown) {
                console.error("Erro ao carregar a modal: " + textStatus, errorThrown);
            });
        });

        $(document).on("submit", "#formInteresse", function (e) {
            e.preventDefault();
            var formData = {
                IdMoto: $("#IdAnuncio").val(), // Alterado para IdMoto para corresponder ao modelo
                NomeCliente: $("#NomeCliente").val(),
                EmailCliente: $("#EmailCliente").val()
            };

            $.post("/Interesse/SalvarInteresse", formData, function (response) {
                if (response.success) {
                    alert("Interesse enviado com sucesso!");
                    $("#modalInteresse").modal("hide");
                } else {
                    alert("Erro ao enviar interesse.");
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {
                console.error("Erro ao enviar interesse: " + textStatus, errorThrown);
            });
        });
    });
</script>
